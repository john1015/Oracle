-- 2024 - 06-04
-- 내장함수 정리
/*
	1~3장 정리
	-------------
	1장 => 23page
		   데이터베이스 : 필요한 정보를 공유할 목적으로 저장 (연관된 데이터)
						  --------------------- 사이트 : 정보 보여준다
		   24page
		   데이터베이스 시스템 : 데이터 검색 (오라클) : 데이터 검색 , 추가 , 수정 , 삭제 => 실시간 반영
		   25page 개념 특징
			= 통합된 데이터 => 한개의 데이터베이스(폴더)에 여러개의 테이블을 저장
			= 저장된 데이터
			= 공용 데이터
			-----------------------------------------------
			= 실시간 접근성
			= 계속적인 변화
			= 동시공유
			= 내용(주소)에 의한 참조
		=> 46 page
			= 데이터 베이스시스템에서 사용한는 명령어
			SELECT / INSERT / UPDATE / DELETE : 조작 DML
			CREATE / ALTER / DROP / RENAME : 정의 DDL
			GRANT / REVOKE : 제어 DCL
			COMMIT / ROLLBACK : 트랜잭션 TCL
		=> 49page : DBMS
	2장 : 테이블 (릴레이션) => 파일 => 사용하기 쉽게 분리
		컬럼으로 구분 => 해당 데이터
		---------------------------------- 2차원 구조
		데이터 종류
			= 정형화된 데이터 => 필요한 데이터만 모아서 관리 = 오라클(데이터 베이스)
			= 반정형화된 데이터 => 구분만 되어 있는 데이터
							HTML(태그 , 속성) , XML (태그) , JSON , CSV ...
			= 비정형화된 데이터 => 구분이 없는 데이터 => 트위터 , 페이스북 ...
							=> 분석해서 => 정형화된 데이터로 변환
							     ------------------------------------------ 빅데이터 => 검증 => 머신러닝
								=> 딥러닝 => AI
			=> 71페이지 테이블의 구성
			------------------------------------------------
			ID	 		PWD			NAME ==> 컬럼 , Attribute (속성) => 멤버변수
			------------------------------------------------
			aaa			1324			hong ==> 인스턴스 , ROW , RECORD => 객체
			------------------------------------------------
			=> 73페이지
			   릴레이션     테이블    파일
			   튜플	    row	 레코드
			   속성	    column	 필드
			   ---------------------------------
			=> 74페이지
			   테이블의 특징
			      1) 같은 데이터 베이스(XE)안에서 중복이 되면 안된다
			      2) 속성명도 중복이 되면 안된다
			      3) 속성 , 데이터는 순서가 없다
			      4) 컬럼의 값은 단일값만 가질 수 있다(원자값)
			         취미 = 등산 , 낚시 => 테이블이 나눠서 저장 => 연결하기 위해서 JSON => SQL문장이 길어진다

			=> 테이블 2개 emp/dept
			      		     => 부서명 , 근무지가 없다 => 부서번호만 가지고 있다	
			=> 76page
			     key
				= 기본키 : 튜플 구분 => PRIMARY KEY => ID , 게시물 번호
				= 참조키 : 다른 테이블 연결 FOREIGN KEY
				= 대체키 : 기본키를 잊어 버린 경우
					=> UNIQUE => 전화 / 이메일 => NULL허용
				* 데이터베이스 : 권장 반드시 중복없는 데이터 추가 ...
			=> 93 PAGE
				관계대수
				=> 셀렉션 => ROW단위	SELECT *
				=> 프로젝션 => Column 단위 SELECT column1 , column2 ...
				=> 개명 => RENAME old_table TO new_table
				=> 합집합 : UNION / UNION ALL
				=> 교집합 : INTERSECT
				=> 차집합 : MINUS
				=> 조인 : 
						INNER JOIN ========> INTERSECT (교집합)
						    => NATURAL JOIN
						OUTER JOIN ========> INTERSECT + MINUS
				----------------------------------------------------------------------------------
*/
/*
select e1.empno , e1.ename , e1.job , e1.mgr , e1.hiredate , e1.sal , e1.comm , dname , loc ,e2. ename "사수이름"
from emp e1 ,emp e2 ,dept 
where e1.deptno = dept.deptno*/
and e1.mgr = e2.empno;