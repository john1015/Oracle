-- 2024-05-31 오라클 2일차

/*
    자바 *********
    오라클 *******
    ------------------
     WEB => 공통
     자바 + 오라클 => MyBatis(오라클 자바연동) , JPA (오라클 자바연동) ==> ORM
    ------------------
    데이터베이스 시스템
    데이터 모델
    ------------------------- 개념
    SQL 기초 Chapter 3, 4, 5
    ------------------------------- 실제 사용
    6, 7 => DBA => 데이터베이스 설계 (정규화 => 면접)
    8, 9 => 이론

    => 23page
	데이터베이스 : 연관된 데이터를 모아서 구조적으로 통합한 저장소
	---------------
		= 변수 / 배열 / 클래스 / 파일
		   --------------------------------- 데이터만 저장 => 자바(프로그램언어를 사용해서 제어)
		= 오라클 => 사용 편리를 위해 만든 저장소
		   -------- 자체에서 제어가 가능 : 삭제 , 수정 , 추가 , 검색이 가능하게 만든 시스템
							      --------------------------- CRUD
							       => 게시판 / 회원가입
			     데이터베이스 시스템 => 24page
 			     *** 데이터가 오라클에 저장되는 것은 아니다(하드 디스크)
					   -----------------------------
						프로그램 언어(자바) => C# , C /C++ , Python , Kotlin ...
					   -----------------------------
							  |	=> SQL
					   -----------------------------
						      오라클 => 데이터베이스 시스템
					   -----------------------------
							  |
				   	   -----------------------------
						    운영체제(Window,Linux,Mac)
					   -----------------------------
							  |
					   -----------------------------
					   	데이터 저장 장소 ==> 하드 디스크 (이미지 파일)
					   -----------------------------
				* 데이터베이스 시스템 개념 과 특징 ==> 25page
					개념 : 데이터를 모아서 통합후에 서로 공유 하는 목적
											    ------ 사이트 : 모든 사용자가 같은 데이터를 사용
														----------------------------------------
														| => static
					=> 특징
						1. 통합된 데이터 (저장공간 => 데이터베이스(폴더))
													     ------ 관련된 파일
												| 관련된 테이블
						    폴더 => 데이터베이스(XE = default) 
						    파일 => 테이블
						   ------- 구분이 없다 (|, ...)
						    줄수 => ROW => Record => Tuple => 저버에서 객체 (인스턴스)

						    => CREATE DATABASE 이름;
						    => DBA(데이터베이스 관리자) => 사이트에 제작에 필요한 SQL
                                                    -----------------------------------------
							JSP : 자바+오라클+HTML/CSS+JavaScript
							       --------------------------------------------
							Spring : 자바+오라클+HTML/CSS+JavaScript+JSP
							실무 => Spring : 자바+오라클+HTML/CSS+JavaScript+JSP
						      -----------------------------------------------------------------------
							MyBatis / JPA / MySQL / AJAX / Vue / React / Redux / NextJS => 교재(X)
						      ----------------------------------------------------------------------------------------
						2. 저장된 데이터 (이미지로 저장 => 접근이 어렵다 => 보안)
							응용프로그램
								| ==> SQL ==> JDBC (12장)
							    오라클
								|
							 하드디스크(데이터 저장)
						3. 운영데이터 : 사이트에 필요한 데이터를 검색목적으로 저장된 데이터에 접근
						4. 공유된 데이터 : 모든 접속자가 같은 데이터를 사용할 수 있게 만든다
									--------------------------------
									| SQL 연습 => 개인 , 프로젝트 데이터는 공유 : 1개
														   ---------------- 공동으로 사용되는 오라클
						--------------------------------------------------------------------------------------------------------

					26page
					---------
					  => 특징
					  1) 실시간 접근성 : 오라클은 항상 서버가 작동 (재부팅 => 구동)
					  2) 계속된 변화 : 수정 , 추가 ... (회원가입 , 게시판 , 댓글)
					  3) 동시공유 : 데이터 공유 ...
					  4) 내용에 의한 참조 => (자바 => 메모리 주소) => 각 ROW 마다 주소를 가지고 있다
						=> 가장 빠른 주소 => 가장 먼저 출력 => 단점 : 순서가 일정하지 않는다
						=> ORDER BY (정렬) : 단점은 속도가 늦다 => INDEX(*************)
					27page
					--------
					  데이터베이스 시스템의 구성 요소
					  => DBMS : 응용 프로그램과 연동 -> 데이터 관리
					  => 데이터베이스 : 실제 데이터가 저장된 장소 => XE
					  => 데이터모델 : 데이터를 저장하는 방법 (자바에서는 데이터형)
						예) 날짜 , 숫자 , 이미지 , 파일 , 문자열
							문자형 : CHAR , VARCHAR2 , CLOB ==> String
								  2000byte 4000byte   4기가
								   ** 한글은 오라클에서 한글자당 => 3byte
							숫자형 : NUMBER ==> int , double ==>38자리
							날짜형 : DATE , TIMESTAMP ==> java.util.Date 
					  		기타 : BLOB , BFILE ==> java.io.InputStream ==> 4기가
									  ------- 파일형태로 저장 : 이력서	
								binary형태로 저장
								------- 0,1 저장
								=> 사진 , 로고 , 동영상 ....
						  안정성을 위해 저장시 필요한 데이터를 저장할수 있게 제약조건
						  									   -----------
						   => 키로 만들어져 있다
							-----------------------
							 NOTNULL : 데이터가 반드시 필요
							 UNIQUE : 중복이 없는 데이터 => 후보키
									NULL값을 허용
							 PRIMARY KEY : NOTNULL + UNIQUE : NULL이 없고 중복이 없는 데이터
									     -------------------------------------------------------------------
							 		      ID => 중복체크
							 SQL / JavaScript / HTML/CSS => 짜증 *****************10000000000000
							 FOREIGN KEY : 다른 테이블 참조 (연결)
							 CHECK : 지정된 데이터만 저장
					--------------------------------------------------------------------------------------------
					 28 PAGE
					----------
					데이터베이스 시스템의 발전 과정
					     => 파일 시스템 : 구분이 없다 , 관련없는 데이터가 첨부 , 보안 취약하다
								 	=> 파일/파일 연결이 어렵다 ... => 원하는 위치에 수정 , 삭제가 어렵다
					     => 데이터베이스 시스템 : 관리가 쉽다 , 구분자 있다 , 이미지형태로 저장 => 보안
									=> 테이블과 테이블 연결이 가능 (JOIN)
					          = Oracle , ****MySQL , ****MariaDB , MsSQL ... => 중형 데이터베이스(일반 업체)
					          = 사이베이스 , ****DB2 .... => 대용량 데이터베이스(금융권 , 학교 , 공기업)
					          = SQLite => 소형 데이터베이스 (핸드폰 , 브라우저)
					          = 카산드라 , MongoDB => NoSQL , 빅데이터 (AI)
					          = SQL은 ANSI다 (표준화)
					     => 웹 데이터베이스 시스템
					     => 분산 데이터베이스 시스템 : 백업 , 데이터베이스 분리 => MSA
					     35~40 => IO(파일 입출력)

					     44PAGE => DBMS 장점
					        => 데이터 중복의 최소화 : 모든 테이블에는 중복이 안된 데이터 1개 이상이 필요
					     		=> 인덱스(번호) , 데이터 중복 없게.... (ID,게시물번호,영화번호....)
					     		     --------------- CREATE SEQUENCE => 자동 증가 번호
					     	=> 데이터 일관성 => 데이터 여러개 저장 => 제네릭
					     	     ---------------- 	--------------------- 배열 / 컬렉션 => 관리가 쉽다
					        ArrayList => 문자열 저장
					        list.add("A"); list.add("A"); list.add("A");
					        list.add(10);
					     	=> 반복문은 데이터의 일관성이 있는 경우에만 사용이 가능
					     	=> 데이터의 독립성 : 관련된것만 제작
					     	---------------------------------------
					     	  ID 		Hobby
						---------------------------------------
					     	  aaa		등산,낚시,여행 ==> X
						-----------------------------------------------------> 데이터값은 1개 설정 => 한개 저장 (원자값)
								=> 1정규화
						aaa 등산
						aaa 낚시
					        aaa 여행 =======> JOIN
					     	------------------------------------------------------------
					     	45PAGE
					     		-------------------------------------------
					     		 사용자 (USER) => 데이터 확인 => 볼수 있게 , 데이터 요청
					     		-------------------------------------------
					     		 ***웹프로그래머 => 데이터 조작 => SQL문장
					     						=> DML (SELECT , INSERT , UPDATE , DELETE)
					     		-------------------------------------------
					     		 DBA => 설계 , 관리 -> 프로젝트 데이터베이스 설계 (약간)
					     		-------------------------------------------
					     	46PAGE
					     		=> 데이터 베이스 언어 : SQL
					     			SQL => 3장 => 1~2장 요약 => 문자열 형태 명령문으로 제작
					     			---- => 오라클에서 문자열 , 문자 , 날짜 => ''만 이용 "" 인용부호
					     			   DDL : 정의 언어 => 저장공간 (테이블) , 가상테이블 , 자동 증가번호 , 함수 , Trigger , 인덱스
					     							TABLE / VIEW / SEQUENCE / DUNCTION / PROCEDURE / TRIGGER / INDEX
					     							     생성 : CREATE
 					     							     		CREATE TABLE / CREATE VIEW / CREATE SEQUENCE
					     							     삭제 : DROP
					     							     		DROP TABLE / DROP VIEW ...
					     							     수정 : ALTER => 단위 컬럼
					     							     			    컬럼 추가 : ADD
					     							     		            컬럼 삭제 : DROP COLUMN
					     							     			    컬럼 수정 : MODIFY
					     							     이름 변경 : RENAME
					     							     잘라내기 : TRUNCATE
					     			   DML : 조작 언어
					     				= DQL : 데이터 검색
					     				   ---------------------- SELECT (가장 많이 사용하는 명령어)
					     				= DML 
					     				   	= 삭제 : DELETE
					     					= 추가 : INSERT
					     					= 수정 : UPDATE
						     				= 테이블을 합하는 과정 : MERGE
					     					= 회사 : 1사분기 2 , 3 , 4 =>
					     			   DCL : 제어 언어
					     				= DCL
					     					= GRANT : 권한 부여
					     					= REVOKE : 권한 해제
					     				= TCL
						     		   		= 저장 : COMMIT
					     					= 취소 : ROLLBACK

*/
--SELECT - FROM - WHERE
/*
	SELECT * | 원하는 컬럼만 지정
	FROM 어느 테이블 => 파일명

	BOOK : 테이브
	 = bookid => 구분자 (번호) 
	 = bookname
	 = publisher
	 = price

	=> 사용자가 요청 => 전체 데이터를 요청 => select *
	=> 사용자가 요청 => 책이름 , 가격 => select bookname , price
	=> 로그인 => id,pwd
	=> 상세보기 , 목록
	-----------------------------------------------------------
	1) 오라클은 공유된 데이터 => 모든 사용자가 동일한 데이터를 사용
						  수정 , 추가 , 삭제 => 바로 반영
	2) 구분자 => 컬럼으로 구분
	3) 데이터를 저장하는 장소 : 테이블(파일)
					      --------------- 여러개를 모아서 관리 : 데이터 베이스
	4) 명령문은 대소문자를 구분하지 않는다 단, 저장된 데이터는 구분한다
								    ---------------
	5) 문자열 , 날짜는 반드시 ' '
	6) 명령문의 종료시네는 ;
	7) 로직은 없다 => 제어문은 존재하지 않는다
			    => 연산자는 존재한다
			    => 함수는 존재한다 (내장 함수 = 라이브러리) 
	= 1. 문장 순서 : SELECT - FROM - WHERE (if)
	= 2. 오라클 : FROM 
	= 3. WHERE
	= 4. SELECT
	= 5. 문자열로 되어있다
	-------------------------------------
	8) 오라클 어렵다
		     --------
		       쉽다
	=> 자바 : 어렵다 => 제어문 , 메소드 ...
	=> 자바 : 쉽다 => 데이터베이스 연동 / 네트워크
				  ----------------------
	=> SQL문장 ... => 원하는 값을 추출
	=> 형식 / 순서 / 문법
	     ----------------------' '
*/
set linesize 250
-- select * from book;
--select bookname ,publisher from book;
--select publisher from book;
--select price from book;
-- 오라클은 대소문 구분하지 않는다 => SELECT , select , Select , SELect ...
-- 오라클에서는 유일하게 대소문자 구분 => 저장된 데이터는 대소문자 구분한다
--							    -----------------
-- select * from emp where ename ='KING';
--select * from book where price >= 10000;
/* => 같은 데이터를 추출하는데 명령문이 여러개 존재 => 어려울수 있다 
SELECT ename , dname 
from emp , dept where emp.deptno = dept.deptno;
select ename , dname 
from emp NATUREL JOIN dept;
select ename 
from emp join dept using (deptno);
select ename,(select dname from dept where deptno = emp.deptno) ,dname
FROM emp; */