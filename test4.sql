-- 2024-06-03 오라클 3일차 => SQL(SELECT) => 데이터 검색 명령어
/*
	69page
	--------
	 1. 릴레이션 (테이블) => 파일
	  => ROW / COLUMN => 2차원 구조
	------------------------------------------
	 id   		 pwd 		name  ....   ==> column / attribute
	------------------------------------------
	 aaa 	 	1234		홍길동      ==> 튜플 / ROW, Record => 객체
	------------------------------------------
	 bbb		1234		홍길동      ==> 튜플 / ROW, Record => 객체
	------------------------------------------
	=> 단위가 ROW => 수정 , 삭제 , 추가 , 검색
	=> 검색
		=> 셀렉션 => ROW(가로)
		=> 프로젝션 => COLUMN(세로)
	2. 릴레이션의 특징
	   1) 속성값은 단일값을 가진다
	       --------- 컬럼
	       ----------------
		hobby
	       ----------------
		여행,낚시	==> 단일값에 위반 => 데이터베이스 모델링(1정규화) => 단일값만 수행
	       ----------------
	   2) 속성명은 서로 다른 이름을 가지고 있다
	       --------- 자바의 멤버변수
	   3) 한속성의 값은 모든 같은 도메인값을 가지고 있다 세로 (도메인) , 가로(튜플)
	       ---------
		id
	       ---------
		aaa
	       ---------
		bbb
	       ---------

	   4) 속성의 순서는 없다
	     id pwd name ==> name pwd id
	     => 기본은 맨앞 속성은 보통 구분자로 사용하는것을 권장
	     사번, 게시물번호 , 아이디 ...

	   5) 테이블명(릴레이션)명은 중복되면 안된다
	   ---------------------------------------------
	   	같은 데이터베이스 안에서 => XE => 기본 데이터베이스가 설정(XE)
	   	데이터베이스 : 폴더 , 테이블 : 파일
	   6) 튜플 (컬럼에 데이터값이 채워진 상태) 은 순서와 관계없다
	   => 제공하는 명령문 => ORDER BY 컬럼명(ASC|DESC)
	   ***** 제어문은 존재하지 않는다 , 연산자는 존재 
	   	   	   	   	   	    -------------- 조건에 맞는 데이터 검색
	   ***** 비절차적 언어 : 오류발생해도 다음 문장을 수행
	   	  
		(절차적 언어)
		  문장 1
		  문장 2 ==> 오류발생 => 종료
		  문장 3
		(비절차적 언어)
		  문장 1
		  문장 2 ==> 오류발생 => 건너뛴다
		  문장 3 ==> 문장을 수행한다
	  ------------------------------------------------
	   	  문장 1 ==> 입고
		  문장 2 ==> 출고 ===> 오류 발생 ==> 예외처리 X
		  문장 3 ==> 재고
	  ------------------------------------------------
	76page
	--------
	   무결성 : 이상현상을 방지 (원하지 않는 데이터가 수정 , 삭제)
	   	     ---------- 수정 , 삭제
		     -------------------------
			name        address
		     -------------------------
			홍길동	서울
		     -------------------------
			홀길동	부산 => 중복이 없는 데이터 첨부 => PRIMARY KEY
		     -------------------------
		     => 삭제
			 DELETE FROM member
			 WHERE name ='aaa';
	   일관성 : 데이터간의 응답의 일치성 => 참조무결성 => FOREIGN KEY
		      테이블 <====> 테이블
		      -------		   ------
		      속성		   속성 ===> 동일한 값을 가지고 있어야 한다
		      예)
			   게시판     	        댓글
			   게시물번호		댓글번호
			   이름 , 제목		이름 , 내용
			   내용 ...			게시물번호 ===> 관계형 대이터베이스
	   보안 : 데이터 노풀을 방지 => 오라클 주소 , 계정 , 비밀번호를 노출하면 안된다
						------------------------------- 자바코드에서 작성하면 안된다
										     파일로 처리 (.properties)
	   효율성 : 응답시간의 최적화 => (인라인뷰 : 테이블없이 처리 => 페이징 , 인덱스)

	   => 키의 종류 ===> 데이터베이스 모델링 ==> 2차 프로젝트에서 조별로 작성
	   1. 슈퍼키 : 식별 => 튜플을 구분하는 모든키를 모아서 슈퍼키
			  회원 등록 : ID 로 구분 (아이디 중복 체크)
					=> ID를 잊어버린 경우
					=> 전화번호 / 이메일
	   ***2. 후보키 : 모든 테이블에 반드시 후보키 한개를 가지고 있어야 한다
			ID => 주민번호(보안상 문제 => 주민번호 사용 금지)
	   ***3. 기본키 : NULL값을 포함하지 않고 중복이 없는 값 => PRIMARY KEY
	   4. 대체키 : UNIQUE => 중복이 없는 값
	   ***5. 왜래키 : 다른 테이블의 값을 참조 => 매핑 테이블 => PRIMARY KEY
	   --------------------- 87 page : 삽입 , 수정 , 삭제시에 발생하는 문제점을 해결
						 ------------------------ 이상 현상 방지
	   => 오라클 내에서는 COMMIT => ROLLBACK으로 처리 => 명령문이 취소가 된다
	   => 자바에서 오라클 연동
	       -----------------------
	   	=> 단점 : AutoCommit => COMMIT을 수행하면  ROLLBACK은 수행이 안된다
	   90 page
	  ---------- 관계대수
	     => 합집합 , 교집합 , 차집합 , 조인
	   1) 93 page => 도표 참조
		= 셀렉션 : 행단위로 조회
		   ---------------------------------
			열1    	열2    .....
		   ---------------------------------
		-----------------------------------------
			행1
		   ---------------------------------
			행2
		-----------------------------------------
		   ---------------------------------
		   SELECT * FROM table명
		   ---------------------------------
		= 프로젝션 : 열단위로 데이터 검색
		   SELECT id,name FROM table 명
		   	    --------- 컬럼지정 ....
		= 개명 : 테이블명 , 컬럼명을 변경 => RENAME
			RENAME old_name TO new_name
			ALTER TABLE table_name RENAME COLUMN old_col TO new_col => 컬럼명 변경
		= 합집합 : 두개의 테이블을 통합해서 데이터 추출
			SELECT * FROM A
			UNION
			SELECT * FROM B
			UNION : 중복을 제거
			UNIONALL : 중복 포함
		= 교집합 : 같은 값을 추출
			SELECT * FROM A
			INTERSECT
			SELECT * FROM B
		= 차집합 : 없는값을 추출 => 교집합을 제외한 나머지
			SELECT * FROM A
			MINUS
			SELECT * FROM B
			(A-B)

			SELECT * FROM B
			MINUS
			SELECT * FROM A
			(B-A)
			     
		= 조인 : 다른 테이블을 연결해서 같은 값을 가진 데이터 추출
			  책정보	회원
			  -------	----
			    |		  |
			   -------------
				|
			 매핑테이블 : 책주문 정보
			=> 분석이 어렵다 / SQL문장이 길어진다(오류발생)
			=> 실무는 오라클에 접근이 불가능
			    --------------------------------
				=> 자바로 연결
		   = 동등 : 같은 값일때 데이터 추출 => 교집합(INTERSECT)
			동등 / 비동등
			EQUI_JOIN / NON_EQUI_JOIN 
			------------------------------ 포함된 값인 경우
			= 같은 값일때 (연산자 =)   (>= AND <=)
			1) 오라클(오라클 에서만 사용)
			EMP
				empno / ename / job / ngr / hiredate / sal / comm / deptno
				사번	   이름	직위 사수  임사일   급여	성과금	
			DEPT
				deptno / dname / loc
				부서번호 부서명 근무지
			2) ANSI (표준화 ) => (다른 데아터 베아수애서 사용이 가능)(******)
			SELECT ename , job , sal , dname , loc
			FROM emp(INNER) JOIN dept
				      ------- 생략 가능
			ON emp.deptno = drpt.deptno

		   = 자연 : NATURAL JOIN => 두개의 테이블에 같은 컬럼명이 존재 
			     => 컬럼이 다를수도 있다 (저장된 값이 같은 경우)
					SELECT ename , job , sal , dname . loc
					FROM emp(INNER) JOIN dept

		   = 외부 : EQUI + JOIN + MINUS
			= LEFT 

				(오라클 조인)
				SELECT ename , job , sal , dname , loc
					  -----------------   ------------
						EMP			DEPT
				FROM emp,dept
				where emp.deptno = dept.deptno(+);

				(ANSI JOIN)
				SELECT ename , job , sal , dname , loc
				FROM emp LEFT OUTER JOIN dept
				where emp.deptno = dept.deptno;


			= RIGHT
				(오라클 조인)
				SELECT ename , job , sal , dname , loc
				FROM emp , dept
				WHERE emp.deptno(+) = dept.deptno

				(ANSI JOIN)
				SELECT ename , job , sal , dname , loc
				FROM emp RIGHT OUTER JOIN dept
				where emp.deptno = dept.deptno;
			=> 이차 for
				=> if문 => inner JOIN
			=> 이차 for => 카디널 곱

			=> JOIN : 다른 테이블 연결
			   => 같은 테이블 연결 ====> SELF JOIN
			=> 124page

*/